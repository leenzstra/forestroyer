unit: (enum_declaration | const_block | method_declaration | class_def | interface_def)*

class_def: [access_modifier] [SHARED] CLASS WORD _COLON type ("," type)* class_body END CLASS WORD _SEMICOLON
class_body: (enum_declaration | class_const_declaration | method_declaration | constructor | field_declaration | property_declaration)*

interface_def: [access_modifier] INTERFACE WORD [_COLON] [INTERFACE_TYPE] interface_body END INTERFACE WORD _SEMICOLON
interface_body: (interface_method_declaration | interface_property_declaration)*
interface_method_declaration: [access_modifier] CALLABLE WORD parameter_list_optional [_COLON type] _SEMICOLON
interface_property_declaration: [access_modifier] PROPERTY WORD parameter_list_optional _COLON type [GET] [SET] END PROPERTY WORD _SEMICOLON

constructor: [access_modifier] CONSTRUCTOR WORD parameter_list_optional _SEMICOLON method_body CONSTRUCTOR WORD _SEMICOLON

property_declaration: [access_modifier] [SHARED] PROPERTY WORD parameter_list_optional _COLON type [property_get] [property_set] END PROPERTY WORD _SEMICOLON
property_get: GET method_body GET
property_set: SET method_body SET

method_declaration: [access_modifier] [SHARED] CALLABLE WORD parameter_list_optional [_COLON type] _SEMICOLON method_body CALLABLE WORD _SEMICOLON
method_body: const_block* var_block* BEGIN statement_list END

parameter_list_optional: ["(" [parameter_list] ")"]
parameter_list: parameter (_SEMICOLON parameter)*
parameter: [VAR] [PARAMARRAY] VARIABLE ("," VARIABLE)* _COLON type ["=" literal_or_var]

var_block: [access_modifier] _VAR variables_list
variables_list: variable_declaration*
variable_declaration: VARIABLE ["," VARIABLE]* _COLON type ["=" (simple_expression | ("[" simple_expression ("," simple_expression)* "]"))] _SEMICOLON

field_declaration: [access_modifier] [SHARED] VARIABLE ["," VARIABLE]* _COLON type ["=" expression] _SEMICOLON

class_const_declaration: [access_modifier] _CONST const_declaration
const_block: [access_modifier] _CONST const_list
const_list: const_declaration*
const_declaration: VARIABLE "=" simple_expression _SEMICOLON

enum_declaration: [access_modifier] ENUM WORD enum_body END ENUM WORD _SEMICOLON
enum_body: enum_value ("," enum_value)
enum_value: VARIABLE "=" literal_or_var

// Базовые конструкции
statement_list: statement*

statement: (assignment_statement 
    | return_statement 
    | if_statement 
    | compound_statement 
    | for_statement 
    | foreach_statement 
    | continue_statement 
    | break_statement 
    | select_block
    | try_block
    | raise_statement
    | dispose_statement
    | expression) _SEMICOLON

for_statement: FOR assignment_statement TO expression (STEP LITERAL_INTEGER)? DO statement_list END FOR
foreach_statement: FOR EACH VARIABLE IN expression DO statement_list END FOR
continue_statement.1: CONTINUE
break_statement.1: BREAK
raise_statement: RAISE expression
dispose_statement: DISPOSE expression

try_block: TRY statement_list [(EXCEPT statement_list) | EXCEPT] (ON VARIABLE _COLON type DO statement_list)* [ELSE statement_list] [FINALLY statement_list] END TRY

select_block: _SELECT _CASE expression (_CASE (lov_case_arg_list) _COLON statement_list)* [ELSE statement_list] END _SELECT

assignment_statement: atom _ASSIGNMENT expression
return_statement: RETURN [expression]
compound_statement: BEGIN statement_list END

if_statement: IF expression THEN statement_list (ELSEIF expression THEN statement_list)* (ELSE statement_list)? END IF
ternary_expression: expression _QUESTION_MARK expression _COLON expression

?expression: (simple_expression | ternary_expression | type_cast) (comparison_op expression)?
!comparison_op: "=" | "<>" | "<" | "<=" | ">" | ">=" | IS_KEYWORD

?simple_expression: term (add_op term)*
!add_op: "+" | "-" | OR
?term: factor (mul_op factor)*
!mul_op: "*" | "/" | AND | "Mod"i | "Div"i

?factor: unary_op factor | atom

!unary_op: "+" | "-" | NOT

?inherited_call: (INHERITED atom)
?constructor_call: NEW atom
?method_call: atom "(" argument_list? ")"
?member_access: atom "." atom
?index_access: atom "[" expression "]"

?atom: VARIABLE | LITERAL | method_call | member_access | index_access | "(" expression ")" | constructor_call | inherited_call
type_cast: atom AS_KEYWORD type

argument_list: expression ("," expression)*
lov_case_arg_list: lov_case_arg ("," lov_case_arg)*
lov_case_arg: lov_range_expression | atom
lov_range_expression: literal_or_var TO literal_or_var
literal_or_var: VARIABLE | LITERAL

access_modifier.1: PUBLIC | PRIVATE | PROTECTED | FRIEND | protected_friend
protected_friend: (PROTECTED FRIEND)

LITERAL: LITERAL_STRING | LITERAL_NUMBER | LITERAL_BOOLEAN | NULL | TYPE_SPECIAL_SYMBOL
LITERAL_NUMBER: LITERAL_DOUBLE | LITERAL_INTEGER
LITERAL_DOUBLE: /[-+]?\d+.\d+/
LITERAL_INTEGER: /[-+]?[0-9][0-9]*|0/
LITERAL_STRING: /([ubf]?r?|r[ubf])("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LITERAL_BOOLEAN: TRUE | FALSE

CALLABLE.5: SUB | FUNCTION
VARIABLE: WORD

type: base_type | CLASS_TYPE | INTERFACE_TYPE
INTERFACE_TYPE: /I[a-zA-Z_][a-zA-Z0-9_]*/i
CLASS_TYPE: WORD
base_type: TYPE_INTEGER
    | TYPE_CHAR
    | TYPE_STRING
    | TYPE_VARIANT
    | TYPE_DOUBLE
    | TYPE_DATETIME
    | TYPE_BOOLEAN
    | type_array
    | TYPE_OBJECT
    | TYPE_DECIMAL
    | TYPE_CURRENCY
    | TYPE_GUID
    | TYPE_INT64

_SEMICOLON: ";"
_COLON: ":"
_ASSIGNMENT: ":="
_QUESTION_MARK: "?"
_VAR: VAR
_CONST: CONST
_SELECT: SELECT
_CASE: CASE
_TO: TO
_END: END
_BEGIN: BEGIN

AND: "and"i
OR: "or"i
NOT: "not"i
CLASS: "Class"i
BEGIN: "Begin"i
VAR: "Var"i
END: "End"i
SUB: "Sub"i
FUNCTION: "Function"i
TRUE: "True"i
FALSE: "False"i
IF: "If"i
THEN: "Then"i
ELSE.1: "Else"i
ELSEIF.2: "Elseif"i
OBJECT: "Object"i
RETURN: "Return"i
GET: "Get"i
SET: "Set"i
PROPERTY: "Property"i
CONSTRUCTOR: "Constructor"i
PUBLIC: "Public"i
PRIVATE: "Private"i
PROTECTED: "Protected"i
FRIEND: "Friend"i
AS_KEYWORD: "As"i
IS_KEYWORD: "Is"i
NULL: "Null"i
FOR: "For"i
EACH: "Each"i
TO: "To"i
DO: "Do"i
IN: "In"i
BREAK: "Break"i
CONTINUE: "Continue"i
NEW: "New"i
STEP: "Step"i
INHERITED: "Inherited"i
SHARED: "Shared"i
CONST: "Const"i
ENUM: "Enum"i
TRY: "Try"i
EXCEPT: "Except"i
ON: "On"i
FINALLY: "Finally"i
SELECT: "Select"i
CASE: "Case"i
OF: "Of"i
PARAMARRAY: "Paramarray"i
RAISE: "Raise"i
DISPOSE: "Dispose"i
INTERFACE.5: "Interface"i

TYPE_INTEGER: "Integer"i
TYPE_CHAR: "Char"i
TYPE_STRING: "String"i
TYPE_VARIANT: "Variant"i
TYPE_DOUBLE: "Double"i
TYPE_DATETIME: "DateTime"i
TYPE_BOOLEAN: "Boolean"i
type_array: TYPE_ARRAY_VARIANT [OF type] ["[" lov_case_arg "]"]
TYPE_OBJECT: "Object"i
TYPE_DECIMAL: "Decimal"i
TYPE_CURRENCY: "Currency"i
TYPE_GUID: "Guid"i
TYPE_INT64: "Int64"i
TYPE_ARRAY_VARIANT: "Array"i
TYPE_SPECIAL_SYMBOL: /\#[0-9]*/


NAME: /[^\W\d]\w*/
WORD: /[a-zA-Z_][a-zA-Z0-9_]*/

%import common.WS
%ignore WS
%ignore /\/\/[^\n]*/    // Однострочные комментарии
%ignore /\/\/\/[^\n]*/
%ignore /\/\*.*?\*\//    // Многострочные комментарии
%ignore /\{(.|\r\n|\r|\n)*?}/    // Многострочные комментарии { }